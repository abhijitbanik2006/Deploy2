{"version":3,"sources":["services/product-service.js","components/content-panel-components/InfiniteScroll.js","containers/ProductList.js"],"names":["ProductService","getProducts","Axios","get","InfiniteScroll","props","pList","useState","slice","listItems","setListItems","isFetching","setIsFetching","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","addEventListener","removeEventListener","setTimeout","prevState","length","map","listItem","Product","pData","code","exchange","key","productId","addedInCart","cartData","filter","p","btnClick","productQty","addToCart","history","push","ProductList","state","currencyExchange","sqlData","this","getData","getCurrencyExchange","then","res","console","log","setState","data","catch","err","CurrencyService","getCurrencyDetails","Exchange","class","Helmet","src","href","rel","sizes","selectedCode","React","Component","connect","storeData","currency","cart","dispatch","CartActions","addItem"],"mappings":"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","file":"static/js/3.6901dbd0.chunk.js","sourcesContent":["// business logic\nimport Axios from \"axios\";\n// class ProductService{\n//     getProducts(){\n//         const endPoint =\n//         \"https://raw.githubusercontent.com/mdmoin7/Random-Products-Json-Generator/master/products.json\";\n//       return Axios.get(endPoint);\n//     }\n// }\nfunction getProducts() {\n  const endPoint = \"/products.json\";\n  // \"https://raw.githubusercontent.com/mdmoin7/Random-Products-Json-Generator/master/products.json\";\n  return Axios.get(endPoint);\n}\n\nconst ProductService = { getProducts };\n\nexport default ProductService;\n","import React, { useState, useEffect } from 'react';\r\nimport Product from \"./Product\";\r\n\r\nconst InfiniteScroll = (props) => {\r\n\r\n    //check infinite scroll with pull data in chunk\r\n    //https://www.pluralsight.com/guides/how-to-implement-infinite-scrolling-with-reactjs\r\n    \r\n    const { pList } = props;\r\n    const [listItems, setListItems] = useState(pList.slice(0, 20));\r\n    const [isFetching, setIsFetching] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isFetching) return;\r\n        fetchMoreListItems();\r\n    }, [isFetching]);\r\n\r\n    function handleScroll() {\r\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\r\n        setIsFetching(true);\r\n    }\r\n\r\n    function fetchMoreListItems() {\r\n        setTimeout(() => {\r\n            setListItems(prevState => (\r\n                [...prevState, ...pList.slice(prevState.length, prevState.length + 20)]\r\n            )\r\n            );\r\n            setIsFetching(false);\r\n        }, 2000);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {listItems.map(listItem =>\r\n                <Product\r\n                    pData={listItem}\r\n                    code={props.code}\r\n                    exchange={props.exchange}\r\n                    key={listItem.productId}\r\n                    addedInCart={props.cartData.filter(p => p.productId === listItem.productId).length > 0}\r\n                    btnClick={() => {\r\n                        //if item already available in cart, no need to perform Add operation\r\n                        if (!props.cartData.filter(p => p.productId === listItem.productId).length > 0) {\r\n\r\n                            //Add only 1 unit by default\r\n                            listItem.productQty = 1;\r\n\r\n                            // add to cart logic here\r\n                            props.addToCart(listItem);\r\n                        }\r\n                        props.history.push(\"/cart\"); // navigate to cart\r\n\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            <div>{isFetching && 'Fetching more list items...'}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfiniteScroll;","import React from \"react\";\nimport Product from \"../components/content-panel-components/Product\";\nimport ProductService from \"../services/product-service\";\nimport { connect } from \"react-redux\";\nimport CartActions from \"../store/actions/cart-actions\";\nimport CurrencyService from \"../services/currency-service\";\nimport \"../Stylesheets/Custom.css\";\nimport Helmet from \"react-helmet\";\nimport InfiniteScroll from \"../components/content-panel-components/InfiniteScroll\";\nimport LeftSidebar from \"../components/left-sidebar-components/left-sidebar\";\n//import { ProductServiceSQL } from \"../services/sqlservice\";\n//import MSSQL from 'react-native-mssql';\n\n//import {useHistory} from \"react-router-dom\";\n//import db from \"../firebase.js\";\n\n// function new_script(src) {\n// \t//return new Promise(function(resolve, reject){\n// \t  var script = document.createElement('script');\n// \t  script.src = src;\n// \t//   script.addEventListener('load', function () {\n// \t// \tresolve();\n// \t//   });\n// \t//   script.addEventListener('error', function (e) {\n// \t// \treject(e);\n// \t//   });\n// \t  document.body.appendChild(script);\n// \t//})\n//   }\n//   function new_css(href, rel) {\n// \t//return new Promise(function(resolve, reject){\n// \t  var link = document.createElement('link');\n// \t  link.href = href;\n// \t  link.rel = rel;\n// \t//   link.addEventListener('load', function () {\n// \t// \tresolve();\n// \t//   });\n// \t//   link.addEventListener('error', function (e) {\n// \t// \treject(e);\n// \t//   });\n// \t  document.body.appendChild(link);\n// \t//})\n//   }\n//   // Promise Interface can ensure load the script only once.\n//   const my_script = new_script('Assets/js/price-range.js');\n//   const my_css = new_css('Assets/css/price-range.css', 'stylesheet');\n\n// //   <script src=\"Assets/js/price-range.js\"></script>\n// // \t<link href=\"Assets/css/price-range.css\" rel=\"stylesheet\" />  \n\n\nclass ProductList extends React.Component {\n\n  // do_load = () => {\n  // \tnew_script('Assets/js/price-range.js');\n  // \tnew_css('Assets/css/price-range.css', 'stylesheet');\n  //   }\n\n  state = {\n    pList: [],\n    currencyExchange: {},\n    sqlData:[],\n  };\n\n  \n\n  componentDidMount() {\n    this.getData();\n    this.getCurrencyExchange();\n    //this.getDataFromSql();\n  }\n\n  // getDataFromSql(){\n  //   const getSqlProducts = () => {\n  //     ProductServiceSQL.then((products) => {\n  //       this.setState({ sqlData: products });\n  //     })\n  // }\n  // }\n\n  // getDataFromSQL(){\n  //   const query = 'SELECT * FROM [dbo].[Product]'\n  //   const result = await MSSQL.executeQuery(query);\n  //   this.setState({ sqlData: result });\n  //   const closed = await MSSQL.close();\n  // }\n\n  // getSQLConnection() {\n  //   const config = {\n  //     server: '(localdb)\\MSSQLLocalDB', //ip address of the mssql database\n  //     username: 'eShopper', //username to login to the database\n  //     password: 'eShopper', //password to login to the database\n  //     database: 'eShopper', //the name of the database to connect to\n  //     //port: 1234, //OPTIONAL, port of the database on the server\n  //     timeout: 5, //OPTIONAL, login timeout for the server\n  //   }\n  //   const connected = await MSSQL.connect(config);\n  // }\n\n  getData() {\n    ProductService.getProducts()\n      .then((res) => {\n        console.log(\"success\", res);\n        this.setState({ pList: res.data }); // update list with data from server\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n      });\n  }\n\n  getCurrencyExchange() {\n    CurrencyService.getCurrencyDetails()\n      .then((res) => {\n        console.log(\"success\", res);\n        this.setState({ currencyExchange: res.data.Exchange }); // update list with data from server\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n      });\n  }\n\n  render() {\n\n    // setTimeout(() => {\n    //     this.do_load()\n    //   }, 0);\n\n    return (\n      //   <div className=\"container\">\n      //   <h3 className=\"h3\">Product List</h3>\n      //   <div className=\"row\">\n      //     {this.state.pList.map((val) => (\n      //       <Product\n      //         pData={val}\n      //         code={this.props.selectedCode}\n      //         exchange={this.state.currencyExchange[this.props.selectedCode]}\n      //         key={val.productId}\n      //         addedInCart={this.props.cartData.filter(p => p.productId === val.productId).length > 0}\n      //         btnClick={() => {\n      //           //if item already available in cart, no need to perform Add operation\n      //           if (!this.props.cartData.filter(p => p.productId === val.productId).length > 0) {\n      //               // add to cart logic here\n      //               this.props.addToCart(val);\n      //           }\n      //           this.props.history.push(\"/cart\"); // navigate to cart\n      //         }}\n      //       />\n      //     ))}\n      //     {/* <Product pData={pList} wishlist={true} /> */}\n      //   </div>\n\n      <section>\n\n        <div class=\"container\">\n          <Helmet>\n\n            {/* <script src=\"Assets/js/jquery.js\"></script>\n                    <script src=\"Assets/js/bootstrap.min.js\" ></script>\n                    <script src=\"Assets/js/jquery.scrollUp.min.js\" ></script> */}\n            <script src=\"Assets/js/price-range.js\"></script>\n            <script src=\"Assets/js/jquery.prettyPhoto.js\" ></script>\n            <script src=\"Assets/js/main.js\" ></script>\n\n\n            {/* <link href=\"Assets/css/bootstrap.min.css\" rel=\"stylesheet\" />\n                    <link href=\"Assets/css/font-awesome.min.css\" rel=\"stylesheet\" />\n                    <link href=\"Assets/css/prettyPhoto.css\" rel=\"stylesheet\" /> */}\n            <link href=\"Assets/css/price-range.css\" rel=\"stylesheet\" />\n            <link href=\"Assets/css/animate.css\" rel=\"stylesheet\" />\n            <link href=\"Assets/css/main.css\" rel=\"stylesheet\" />\n            <link href=\"Assets/css/responsive.css\" rel=\"stylesheet\" />\n            <link rel=\"shortcut icon\" href=\"Assets/images/ico/favicon.ico\" />\n            <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"Assets/images/ico/apple-touch-icon-144-precomposed.png\" />\n            <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"Assets/images/ico/apple-touch-icon-114-precomposed.png\" />\n            <link rel=\"apple-touch-icon-precomposed\" sizes=\"72x72\" href=\"Assets/images/ico/apple-touch-icon-72-precomposed.png\" />\n            <link rel=\"apple-touch-icon-precomposed\" href=\"Assets/images/ico/apple-touch-icon-57-precomposed.png\" />\n\n\n          </Helmet>\n          <div class=\"row\">\n            {/* Category div will be sticky for screens with min width 700px */}\n            <div class=\"col-sm-3 sticky\">\n              <LeftSidebar />\n            </div>\n\n            <div class=\"col-sm-9 padding-right\">\n              <div class=\"features_items\">\n                <h2 class=\"title text-center\">Features Items</h2>\n\n                {/* {this.state.pList.map((val) => (\n\t\t\t\t\t\t<Product\n\t\t\t\t\t\t\tpData={val}\n\t\t\t\t\t\t\tcode={this.props.selectedCode}\n\t\t\t\t\t\t\texchange={this.state.currencyExchange[this.props.selectedCode]}\n\t\t\t\t\t\t\tkey={val.productId}\n\t\t\t\t\t\t\taddedInCart={this.props.cartData.filter(p => p.productId === val.productId).length > 0}\n\t\t\t\t\t\t\tbtnClick={() => {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//if item already available in cart, no need to perform Add operation\n\t\t\t\t\t\t\tif (!this.props.cartData.filter(p => p.productId === val.productId).length > 0) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Add only 1 unit by default\n\t\t\t\t\t\t\t\tval.productQty = 1;\n\n\t\t\t\t\t\t\t\t// add to cart logic here\n\t\t\t\t\t\t\t\tthis.props.addToCart(val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.props.history.push(\"/cart\"); // navigate to cart\n\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t))} */}\n                {this.state.pList != null && this.state.pList.length > 0 ?\n\n                  (<InfiniteScroll\n                    pList={this.state.pList}\n                    code={this.props.selectedCode}\n                    exchange={this.state.currencyExchange[this.props.selectedCode]}\n                    cartData={this.props.cartData}\n                    addToCart={this.props.addToCart}\n                    history={this.props.history}\n                  //key={val.productId}\n                  //addedInCart={this.props.cartData.filter(p => p.productId === val.productId).length > 0}\n                  // btnClick={() => {\t\t\t\t\t\t\t\t\n                  // //if item already available in cart, no need to perform Add operation\n                  // if (!this.props.cartData.filter(p => p.productId === val.productId).length > 0) {\n\n                  // \t//Add only 1 unit by default\n                  // \tval.productQty = 1;\n\n                  // \t// add to cart logic here\n                  // \tthis.props.addToCart(val);\n                  // }\n                  // this.props.history.push(\"/cart\"); // navigate to cart\n\n                  // }}\n                  />\n                  ) : \"\"}\n\n\n                {/* <ul class=\"pagination\">\n\t\t\t\t\t\t\t<li class=\"active\"><a href=\"\">1</a></li>\n\t\t\t\t\t\t\t<li><a href=\"\">2</a></li>\n\t\t\t\t\t\t\t<li><a href=\"\">3</a></li>\n\t\t\t\t\t\t\t<li><a href=\"\">&raquo;</a></li>\n\t\t\t\t\t\t</ul> */}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n    );\n  }\n}\n// connect(how to connect)(what to connect/component)\nconst mapStoreDataToProps = (storeData) => {\n  return {\n    selectedCode: storeData.currency,\n    cartData: storeData.cart,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addToCart: (p) => dispatch(CartActions.addItem(p)),\n  };\n};\n\nexport default connect(mapStoreDataToProps, mapDispatchToProps)(ProductList);\n"],"sourceRoot":""}